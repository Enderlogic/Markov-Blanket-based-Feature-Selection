library(readr)
Clean <- read_csv("Documents/Python/BN structure learning/data/1/Clean.csv")
View(Clean)
`1` <- readRDS("~/Documents/Python/BN structure learning/true graphs/1.rds")
Clean = data.frame(lapply(Clean, as.factor))
library(bnlearn)
shd(pc.stable(Clean), cpdag(`1`))
vstructs(`1`)
library(readr)
MCAR <- read_csv("Documents/Python/missing-test/data/1/MCAR.csv")
View(MCAR)
MCAR= data.frame(lapply(MCAR, as.factor))
library(mice)
MCAR.mice = mice(MCAR, m = 1)
data = complete(MCAR.mice)
MCAR.missForest = missForest::missForest(MCAR)
test = MCAR.missForest$ximp
View(test)
dag <- readRDS("~/Documents/Python/missing-test/synthetic models/2.rds")
library(bnlearn)
graphviz.plot(dag)
library(readr)
MCAR <- read_csv("Documents/Python/missing-test/data/1/MCAR.csv")
View(MCAR)
MCAR = data.frame(lapply(MCAR, as.factor))
nal.score = function(data, var, parent, rvs, alpha = 0.3) {
data.filter = data[complete.cases(data[c(var, rvs)]), ]
nal = sum(table(data.filter[c(var, parent)]) * log(prop.table(table(data.filter[c(var, parent)]), parent)), na.rm = TRUE) / sum(table(data.filter[c(var, parent)]))
if (length(parent) == 0)
nal = nal - log(nrow(data.filter)) / 2 / sqrt(nrow(data.filter)) * (nlevels(data[[var]]) - 1)
# nal = nal - 1 / ncol(data) * nrow(data.filter) ** -alpha * (nlevels(data[[var]]) - 1)
else
nal = nal - log(nrow(data.filter)) / 2 / sqrt(nrow(data.filter)) * (nlevels(data[[var]]) - 1) * prod(as.numeric(unname(lapply(data[parent], nlevels))))
# nal = nal - 1 / ncol(data) * nrow(data.filter) ** -alpha * (nlevels(data[[var]]) - 1) * prod(as.numeric(unname(lapply(data[parent], nlevels))))
# nal = nal - log(nrow(data)) / 2 / nrow(data) * (nlevels(data[[var]]) - 1) * prod(as.numeric(unname(lapply(data[parent], nlevels))))
return(nal)
}
nal.score(MCAR, 'tkxUg', c(), c('tkxUg'))
nal.score(MCAR[1:100,], 'tkxUg', c(), c('tkxUg'))
data[complete.cases(data[c(var, rvs)]), ]
data[complete.cases(data[c('tkxUg', c('tkxUg'))]), ]
nal.score(MCAR[1:100,], 'tkxUg', c(), c('tkxUg'))
nal.score(MCAR[1:100,], 'tkxUg', c(), c())
var = 'tkxUg'
rvs = c('tkxUg')
data[complete.cases(MCAR[1:100, ][c(var, rvs)]), ]
data = MCAR[1:100, ]
data[complete.cases(data[c(var, rvs)]), ]
data[complete.cases(data[c(var)]), ]
data[complete.cases(data[rvs]), ]
data$tkxUg
is.na(data$tkxUg)
sum(is.na(data$tkxUg))
data[complete.cases(data[rvs]), ]
nal.score = function(data, var, parent, rvs, alpha = 0.3) {
data.filter = data[complete.cases(data[rvs]), ]
nal = sum(table(data.filter[c(var, parent)]) * log(prop.table(table(data.filter[c(var, parent)]), parent)), na.rm = TRUE) / sum(table(data.filter[c(var, parent)]))
if (length(parent) == 0)
# nal = nal - log(nrow(data.filter)) / 2 / sqrt(nrow(data.filter)) * (nlevels(data[[var]]) - 1)
nal = nal - 1 / ncol(data) * nrow(data) ** -alpha * (nlevels(data[[var]]) - 1)
else
# nal = nal - log(nrow(data.filter)) / 2 / sqrt(nrow(data.filter)) * (nlevels(data[[var]]) - 1) * prod(as.numeric(unname(lapply(data[parent], nlevels))))
nal = nal - 1 / ncol(data) * nrow(data) ** -alpha * (nlevels(data[[var]]) - 1) * prod(as.numeric(unname(lapply(data[parent], nlevels))))
# nal = nal - log(nrow(data)) / 2 / nrow(data) * (nlevels(data[[var]]) - 1) * prod(as.numeric(unname(lapply(data[parent], nlevels))))
return(nal)
}
nal.score(data, var, c(), rvs)
nal.score(data, 'DOjbL', c(), c('DOjbL'))
nal.score(data, 'gMjdp', c(), c('gMjdp'))
nal.score(data, 'EBcad', c(), c('EBcad'))
data$EBcad
is.na(data$EBcad)
sum(is.na(data$EBcad))
nal.score(data, 'EBcad', c(), c('EBcad'))
table(data.filter[c(var, parent)])
rvs = c('EBcad')
var = 'EBcad'
parent = c()
data[complete.cases(data[rvs]), ]
data.filter = data[complete.cases(data[rvs]), ]
table(data.filter[c(var, parent)])
ecoli70 <- readRDS("~/OneDrive - Queen Mary, University of London/kernel_based_imputation/real models/ecoli70.rds")
library(bnlearn)
mb(ecoli70, 'sucA')
ecoli70$sucA
ecoli70$yfaD
source("~/Documents/Python/imputation/GAIN/test.R")
